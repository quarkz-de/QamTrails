unit Qam.PhotoAlbum;

interface

uses
  System.SysUtils, System.Classes, System.IOUtils, System.StrUtils,
  Vcl.Graphics,
  Generics.Collections,
  Spring, Spring.Collections, Spring.Persistence.Mapping.Attributes;

type
  TPhotoItem = class;
  TPhotoAlbum = class;

  TPhotoItemThumbnail = class
  private
    FBitmap: TBitmap;
    FIsLoaded: Boolean;
    FItem: TPhotoItem;
    function GetBitmap: TBitmap;
  public
    constructor Create(const AItem: TPhotoItem);
    destructor Destroy; override;
    procedure Load; overload;
    procedure Load(const AWidth, AHeight: Integer); overload;
    property IsLoaded: Boolean read FIsLoaded;
    property Bitmap: TBitmap read GetBitmap;
  end;

  [Entity]
  [Table('PHOTOITEMS')]
  TPhotoItem = class
  private
    [Column('ID', [cpRequired, cpPrimaryKey])][AutoGenerated]
    FId: Integer;
    FAlbumId: Integer;
    FFilename: String;
    FThumbnail: TPhotoItemThumbnail;
    FAlbum: TPhotoAlbum;
    function GetFilename: String;
    function GetTimestamp: TDateTime;
    function GetThumbnail: TPhotoItemThumbnail;
    procedure SetFilename(const Value: String);
  public
    constructor Create;
    destructor Destroy; override;

    property Id: Integer read FId;

    function ExtractFilename: String;

    [Column('ALBUM')]
    [ForeignJoinColumn('ALBUM', 'PHOTOALBUMS', 'ID', [fsOnDeleteCascade, fsOnUpdateCascade])]
    property AlbumId: Integer read FAlbumId write FAlbumId;

    [Column('FILENAME')]
    property Filename: String read GetFilename write SetFilename;

//    [Column('TIMESTAMP')]
    property Timestamp: TDateTime read GetTimestamp;
    property Thumbnail: TPhotoItemThumbnail read GetThumbnail;

    [ManyToOne(False, [ckCascadeAll], 'AlbumId')]
    property Album: TPhotoAlbum read FAlbum write FAlbum;
  end;

  [Entity]
  [Table('PHOTOALBUMS')]
  TPhotoAlbum = class
  private
    [Column('ID', [cpRequired, cpPrimaryKey])][AutoGenerated]
    FId: Integer;

    FName: String;

    [OneToMany(False, [ckCascadeAll])]
    FPhotos: Lazy<IList<TPhotoItem>>;
  public
    constructor Create;
    function Add(const AFilename: String): Integer;

    property Id: Integer read FId;

    [Column('NAME')]
    property Name: String read FName write FName;

    property Photos: Lazy<IList<TPhotoItem>> read FPhotos write FPhotos;
  end;

  TThumbnailThread = class(TThread)
  private
    FThumbnail: TPhotoItemThumbnail;
    FWidth: Integer;
    FHeight: Integer;
    FItemIndex: Integer;
  protected
    procedure Execute; override;
  public
    constructor Create(const AThumbnail: TPhotoItemThumbnail;
      const AWidth, AHeight, AItemIndex: Integer; const AOnTerminate: TNotifyEvent);
    property ItemIndex: Integer read FItemIndex;
  end;

  TPhotoAlbumItemHelper = class
  public
    class function AddItem(const AAlbum: TPhotoAlbum;
      const AFilename: String): TPhotoItem;
    class function CompactFilename(const AFilename: String): String;
    class function ExpandFilename(const AFilename: String): String;
  end;

implementation

uses
  Spring.Container,
  Qam.JpegLoader, Qam.Settings, Qam.Database;

{ TPhotoItem }

constructor TPhotoItem.Create;
begin
  inherited Create;
  FThumbnail := nil;
end;

destructor TPhotoItem.Destroy;
begin
  if Assigned(FAlbum) then
    begin
{$IFDEF AUTOREFCOUNT}
      FAlbum.DisposeOf;
{$ENDIF}
      FAlbum.Free;
    end;
  FThumbnail.Free;
  inherited Destroy;
end;

function TPhotoItem.ExtractFilename: String;
begin
  Result := TPath.GetFileNameWithoutExtension(FFilename);
end;

function TPhotoItem.GetFilename: String;
begin
  Result := TPhotoAlbumItemHelper.ExpandFilename(FFilename);
end;

function TPhotoItem.GetThumbnail: TPhotoItemThumbnail;
begin
  if FThumbnail = nil then
    FThumbnail := TPhotoItemThumbnail.Create(self);
  Result := FThumbnail;
end;

function TPhotoItem.GetTimestamp: TDateTime;
begin
  Result := TFile.GetCreationTime(Filename);
end;

procedure TPhotoItem.SetFilename(const Value: String);
begin
  FFilename := TPhotoAlbumItemHelper.CompactFilename(Value);
end;

{ TPhotoAlbum }

function TPhotoAlbum.Add(const AFilename: String): Integer;
begin
//  Result := FPhotos.Add(TPhotoItem.Create(AFilename));
end;

constructor TPhotoAlbum.Create;
begin
  inherited;
  FPhotos := TCollections.CreateObjectList<TPhotoItem>;
end;

{ TPhotoItemThumbnail }

constructor TPhotoItemThumbnail.Create(const AItem: TPhotoItem);
begin
  inherited Create;
  FItem := AItem;
  FBitmap := TBitmap.Create;
  FIsLoaded := false;
end;

destructor TPhotoItemThumbnail.Destroy;
begin
  FBitmap.Free;
  inherited;
end;

function TPhotoItemThumbnail.GetBitmap: TBitmap;
begin
  if not IsLoaded then
    Load;
  Result := FBitmap;
end;

procedure TPhotoItemThumbnail.Load(const AWidth, AHeight: Integer);
begin
  TJpegLoader.LoadThumbnail(FItem.Filename, AWidth, AHeight, FBitmap);
  FIsLoaded := true;
end;

procedure TPhotoItemThumbnail.Load;
begin
  Load(80, 60);
end;

{ TThumbnailThread }

constructor TThumbnailThread.Create(const AThumbnail: TPhotoItemThumbnail;
  const AWidth, AHeight, AItemIndex: Integer; const AOnTerminate: TNotifyEvent);
begin
  inherited Create;
  FreeOnTerminate := true;
  FWidth := AWidth;
  FHeight := AHeight;
  FThumbnail := AThumbnail;
  FItemIndex := AItemIndex;
  OnTerminate := AOnTerminate;
end;

procedure TThumbnailThread.Execute;
begin
  FThumbnail.Load(FWidth, FHeight);
end;

{ TPhotoAlbumItemHelper }

class function TPhotoAlbumItemHelper.AddItem(const AAlbum: TPhotoAlbum;
  const AFilename: String): TPhotoItem;
var
  RelativeFilename: String;
  Database: IQamTrailsDatabase;
begin
  RelativeFilename := CompactFilename(AFilename);

  // todo: Prüfen ob die Datei schon im Album ist

  Result := TPhotoItem.Create;
  Result.Filename := AFilename;
  Result.AlbumId := AAlbum.Id;

  Database := GlobalContainer.Resolve<IQamTrailsDatabase>;
  Database.GetSession.Save(Result);
end;

class function TPhotoAlbumItemHelper.CompactFilename(
  const AFilename: String): String;
var
  BaseFolder: String;
begin
  BaseFolder := ApplicationSettings.DataFoldername + '\';
  Result := AFilename;
  if CompareText(ApplicationSettings.DataFoldername, LeftStr(AFilename, Length(BaseFolder))) = 0 then
    Delete(Result, 1, Length(BaseFolder));
end;

class function TPhotoAlbumItemHelper.ExpandFilename(
  const AFilename: String): String;
begin
  if IsRelativePath(AFilename) then
    Result := TPath.Combine(ApplicationSettings.DataFoldername, AFilename)
  else
    Result := AFilename;
end;

end.
